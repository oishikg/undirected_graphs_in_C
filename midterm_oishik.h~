/* header file */


/* typedef for nodes, note that this definition is recursive */
typedef struct m_node
{
  /* void pointer is a placeholder for pointers of a concrete type, i.e., data of int* , float*, or char*. */
  void * data;
  /* int type represent the type of data eventually stored, 1: int, 2:float, 3:char*, 0:
   * uninitialized */
  int data_type;
  /* int uid is an id uniquely identifies the node; this helps visualize the graph */
  int uid;
  /* pointers to pointers of other nodes */
  struct m_node ** connected_nodes;
  /* int value to store the number of edges */
  int num_edges;
  /* int value to keep track of the maximum space for edges, 
   * , m_node is realloced when num_edges = max_edges */
  int max_edges;
} node;


/* typedef for graphs. only store the pointer to the root node,
 * since all other nodes are accessible from it */
typedef struct
{
  /* pointer to root node */
  node* root_node;
  /* double pointer to keep track of all nodes in the graph */
  node** all_nodes;
  /* number of nodes presently if graph */
  int num_nodes;
  /* maximum number of nodes in graph. this is updated when num_nodes = max_nodes
  * using realloc. */
  int max_nodes;
} graph;



/* global variables */
int uid;
int counter_for_at_distance;
